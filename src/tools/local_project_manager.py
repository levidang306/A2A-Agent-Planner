"""
📁 Local Project Files Generator - A2A System
==============================================
Creates real local files for project management without requiring API keys
"""

import json
import os
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import csv

class LocalProjectManager:
    def __init__(self, projects_dir: str = "a2a_projects"):
        self.projects_dir = projects_dir
        self.ensure_projects_directory()
    
    def ensure_projects_directory(self):
        """Create projects directory if it doesn't exist"""
        if not os.path.exists(self.projects_dir):
            os.makedirs(self.projects_dir)
            print(f"📁 Created projects directory: {self.projects_dir}")
    
    def create_project_structure(self, project_name: str, milestones: List[Dict], 
                                tasks: List[Dict], team_members: List[Dict], 
                                timeline: Dict = None) -> Dict[str, Any]:
        """Create complete project file structure locally"""
        
        # Sanitize project name for filesystem
        safe_project_name = self._sanitize_filename(project_name)
        project_path = os.path.join(self.projects_dir, safe_project_name)
        
        # Create project directory
        os.makedirs(project_path, exist_ok=True)
        
        result = {
            "project_path": project_path,
            "project_name": project_name,
            "created_at": datetime.now().isoformat(),
            "files_created": []
        }
        
        # 1. Create project overview file
        overview_file = self._create_project_overview(project_path, project_name, milestones, tasks, team_members)
        result["files_created"].append(overview_file)
        
        # 2. Create milestones file
        milestones_file = self._create_milestones_file(project_path, milestones)
        result["files_created"].append(milestones_file)
        
        # 3. Create tasks file (CSV for easy editing)
        tasks_file = self._create_tasks_csv(project_path, tasks, team_members)
        result["files_created"].append(tasks_file)
        
        # 4. Create team file
        team_file = self._create_team_file(project_path, team_members)
        result["files_created"].append(team_file)
        
        # 5. Create timeline file
        if timeline:
            timeline_file = self._create_timeline_file(project_path, timeline)
            result["files_created"].append(timeline_file)
        
        # 6. Create README with instructions
        readme_file = self._create_project_readme(project_path, project_name)
        result["files_created"].append(readme_file)
        
        # 7. Create Gantt chart HTML
        gantt_file = self._create_gantt_chart_html(project_path, tasks, milestones, timeline)
        result["files_created"].append(gantt_file)
        
        # 8. Create JSON summary for external tools
        json_file = self._create_json_summary(project_path, project_name, milestones, tasks, team_members, timeline)
        result["files_created"].append(json_file)
        
        return result
    
    def _create_project_overview(self, project_path: str, project_name: str, 
                                milestones: List[Dict], tasks: List[Dict], 
                                team_members: List[Dict]) -> str:
        """Create markdown project overview file"""
        
        file_path = os.path.join(project_path, "PROJECT_OVERVIEW.md")
        
        content = f"""# 🚀 {project_name}

**Generated by A2A System** - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 📊 Project Summary

- **Total Milestones**: {len(milestones)}
- **Total Tasks**: {len(tasks)}
- **Team Size**: {len(team_members)}
- **Created**: {datetime.now().strftime('%Y-%m-%d')}

## 🎯 Milestones Overview

"""
        
        for i, milestone in enumerate(milestones, 1):
            content += f"""### {i}. {milestone.get('title', f'Milestone {i}')}
- **Duration**: {milestone.get('duration', 'TBD')}
- **Description**: {milestone.get('description', 'No description')}

"""
        
        content += f"""## 👥 Team Members

| Name | Role | Skills |
|------|------|--------|
"""
        
        for member in team_members:
            skills = ', '.join(list(member.get('skills', {}).keys())[:5])  # Top 5 skills
            content += f"| {member.get('name', 'Unknown')} | {member.get('role', 'Team Member')} | {skills} |\\n"
        
        content += f"""

## 📝 Quick Task Summary

**Total Tasks**: {len(tasks)}

"""
        
        for i, task in enumerate(tasks[:10], 1):  # Show first 10 tasks
            content += f"{i}. **{task.get('title', f'Task {i}')}** - {task.get('time_estimate', 'TBD')} ({task.get('priority', 'Medium')} priority)\\n"
        
        if len(tasks) > 10:
            content += f"\\n... and {len(tasks) - 10} more tasks (see TASKS.csv for complete list)\\n"
        
        content += f"""

## 📁 Project Files

- `MILESTONES.md` - Detailed milestone breakdown
- `TASKS.csv` - Complete task list with estimates and assignments
- `TEAM.json` - Team member details and skills
- `TIMELINE.json` - Project timeline and scheduling
- `GANTT_CHART.html` - Visual project timeline (open in browser)
- `PROJECT_DATA.json` - Machine-readable project data

## 🔧 How to Use

1. **Review Tasks**: Open `TASKS.csv` in Excel/Google Sheets for easy task management
2. **Track Progress**: Update task status in the CSV file
3. **View Timeline**: Open `GANTT_CHART.html` in your browser for visual timeline
4. **Team Coordination**: Share team details from `TEAM.json`

---
*This project structure was automatically generated by the A2A (Agent-to-Agent) system.*
"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return file_path
    
    def _create_milestones_file(self, project_path: str, milestones: List[Dict]) -> str:
        """Create detailed milestones markdown file"""
        
        file_path = os.path.join(project_path, "MILESTONES.md")
        
        content = f"""# 🎯 Project Milestones

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

"""
        
        for i, milestone in enumerate(milestones, 1):
            content += f"""## Milestone {i}: {milestone.get('title', f'Milestone {i}')}

**Duration**: {milestone.get('duration', 'TBD')}  
**Dependencies**: {milestone.get('dependencies', 'None')}

### Description
{milestone.get('description', 'No detailed description provided.')}

### Success Criteria
- [ ] All associated tasks completed
- [ ] Quality assurance passed
- [ ] Documentation updated
- [ ] Stakeholder approval received

### Notes
- Estimated completion: {self._calculate_milestone_date(i, milestone.get('duration', '2 weeks'))}
- Risk level: {milestone.get('risk_level', 'Medium')}

---

"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return file_path
    
    def _create_tasks_csv(self, project_path: str, tasks: List[Dict], team_members: List[Dict]) -> str:
        """Create CSV file with all tasks for easy management"""
        
        file_path = os.path.join(project_path, "TASKS.csv")
        
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'Task_ID', 'Title', 'Description', 'Time_Estimate', 'Priority', 
                'Assigned_To', 'Status', 'Dependencies', 'Skills_Required', 
                'Start_Date', 'Due_Date', 'Notes'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for i, task in enumerate(tasks, 1):
                # Assign to team member based on skills if possible
                assigned_to = self._assign_task_to_member(task, team_members)
                
                writer.writerow({
                    'Task_ID': f"T{i:03d}",
                    'Title': task.get('title', f'Task {i}'),
                    'Description': task.get('description', 'No description'),
                    'Time_Estimate': task.get('time_estimate', 'TBD'),
                    'Priority': task.get('priority', 'Medium'),
                    'Assigned_To': assigned_to,
                    'Status': 'Not Started',
                    'Dependencies': task.get('dependencies', 'None'),
                    'Skills_Required': ', '.join(task.get('required_skills', [])),
                    'Start_Date': '',  # To be filled by project manager
                    'Due_Date': '',    # To be filled by project manager
                    'Notes': 'Generated by A2A System'
                })
        
        return file_path
    
    def _create_team_file(self, project_path: str, team_members: List[Dict]) -> str:
        """Create JSON file with team member details"""
        
        file_path = os.path.join(project_path, "TEAM.json")
        
        team_data = {
            "generated_at": datetime.now().isoformat(),
            "team_size": len(team_members),
            "members": team_members,
            "skills_summary": self._generate_skills_summary(team_members),
            "contact_template": {
                "note": "Add real contact information for team coordination",
                "slack_channel": "#project-team",
                "meeting_schedule": "Weekly standup - TBD"
            }
        }
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(team_data, f, indent=2, ensure_ascii=False)
        
        return file_path
    
    def _create_timeline_file(self, project_path: str, timeline: Dict) -> str:
        """Create JSON timeline file"""
        
        file_path = os.path.join(project_path, "TIMELINE.json")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(timeline, f, indent=2, ensure_ascii=False, default=str)
        
        return file_path
    
    def _create_project_readme(self, project_path: str, project_name: str) -> str:
        """Create README with project instructions"""
        
        file_path = os.path.join(project_path, "README.md")
        
        content = f"""# {project_name}

## 🚀 Quick Start

This project was automatically generated by the A2A (Agent-to-Agent) system.

### 📋 Project Management Files

1. **PROJECT_OVERVIEW.md** - Start here for project summary
2. **TASKS.csv** - Open in Excel/Google Sheets to manage tasks
3. **GANTT_CHART.html** - Open in browser for visual timeline
4. **TEAM.json** - Team member details and skills

### ✅ Task Management Workflow

1. Open `TASKS.csv` in your preferred spreadsheet application
2. Update the `Status` column as work progresses:
   - `Not Started` → `In Progress` → `Review` → `Completed`
3. Fill in `Start_Date` and `Due_Date` columns
4. Add notes in the `Notes` column

### 📊 Progress Tracking

- Total tasks can be tracked in the CSV file
- Use filters to view tasks by assignee, priority, or status
- Calculate completion percentage: (Completed tasks / Total tasks) × 100

### 🔄 Updates

To update the project structure:
1. Modify the CSV file with new tasks or changes
2. Re-run the A2A system if major changes are needed

### 🤝 Team Collaboration

- Share the entire project folder with team members
- Use version control (Git) to track changes
- Schedule regular reviews of task progress

---

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Tool**: A2A Project Management System
"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return file_path
    
    def _create_gantt_chart_html(self, project_path: str, tasks: List[Dict], 
                                milestones: List[Dict], timeline: Dict = None) -> str:
        """Create HTML Gantt chart visualization"""
        
        file_path = os.path.join(project_path, "GANTT_CHART.html")
        
        html_content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Project Gantt Chart</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .gantt-container {{ overflow-x: auto; }}
        table {{ border-collapse: collapse; width: 100%; min-width: 800px; }}
        th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
        .milestone {{ background-color: #ffeb3b; }}
        .task {{ background-color: #e3f2fd; }}
        .high-priority {{ border-left: 4px solid #f44336; }}
        .medium-priority {{ border-left: 4px solid #ff9800; }}
        .low-priority {{ border-left: 4px solid #4caf50; }}
        .gantt-bar {{ height: 20px; margin: 2px 0; border-radius: 3px; }}
        .gantt-bar-milestone {{ background: linear-gradient(90deg, #ffeb3b, #ffc107); }}
        .gantt-bar-task {{ background: linear-gradient(90deg, #2196f3, #03a9f4); }}
    </style>
</head>
<body>
    <h1>📊 Project Gantt Chart</h1>
    <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    
    <div class="gantt-container">
        <table>
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Item</th>
                    <th>Time Estimate</th>
                    <th>Priority</th>
                    <th>Assigned To</th>
                    <th>Visual Timeline</th>
                </tr>
            </thead>
            <tbody>
"""
        
        # Add milestones
        for i, milestone in enumerate(milestones):
            html_content += f"""
                <tr class="milestone">
                    <td>🎯 Milestone</td>
                    <td>{milestone.get('title', f'Milestone {i+1}')}</td>
                    <td>{milestone.get('duration', 'TBD')}</td>
                    <td>High</td>
                    <td>Team Lead</td>
                    <td><div class="gantt-bar gantt-bar-milestone" style="width: {min(200, len(milestone.get('description', '')) * 2)}px;"></div></td>
                </tr>
"""
        
        # Add tasks
        for i, task in enumerate(tasks):
            priority_class = f"{task.get('priority', 'medium').lower()}-priority"
            time_estimate = task.get('time_estimate', '8 hours')
            bar_width = self._estimate_bar_width(time_estimate)
            
            html_content += f"""
                <tr class="task {priority_class}">
                    <td>📝 Task</td>
                    <td>{task.get('title', f'Task {i+1}')}</td>
                    <td>{time_estimate}</td>
                    <td>{task.get('priority', 'Medium')}</td>
                    <td>{task.get('assigned_to', 'TBD')}</td>
                    <td><div class="gantt-bar gantt-bar-task" style="width: {bar_width}px;"></div></td>
                </tr>
"""
        
        html_content += """
            </tbody>
        </table>
    </div>
    
    <h2>📋 Legend</h2>
    <ul>
        <li>🎯 <span style="background-color: #ffeb3b; padding: 2px 8px;">Milestones</span> - Major project phases</li>
        <li>📝 <span style="background-color: #e3f2fd; padding: 2px 8px;">Tasks</span> - Individual work items</li>
        <li><span style="border-left: 4px solid #f44336; padding-left: 8px;">High Priority</span></li>
        <li><span style="border-left: 4px solid #ff9800; padding-left: 8px;">Medium Priority</span></li>
        <li><span style="border-left: 4px solid #4caf50; padding-left: 8px;">Low Priority</span></li>
    </ul>
    
    <p><em>This is a simplified Gantt chart. For detailed project scheduling, import the data into specialized project management tools.</em></p>
</body>
</html>"""
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return file_path
    
    def _create_json_summary(self, project_path: str, project_name: str, 
                            milestones: List[Dict], tasks: List[Dict], 
                            team_members: List[Dict], timeline: Dict = None) -> str:
        """Create machine-readable JSON summary for external tools"""
        
        file_path = os.path.join(project_path, "PROJECT_DATA.json")
        
        project_data = {
            "project_info": {
                "name": project_name,
                "generated_at": datetime.now().isoformat(),
                "generator": "A2A Project Management System",
                "version": "2.0"
            },
            "statistics": {
                "total_milestones": len(milestones),
                "total_tasks": len(tasks),
                "team_size": len(team_members),
                "estimated_hours": sum(self._parse_time_to_hours(task.get('time_estimate', '8 hours')) for task in tasks)
            },
            "milestones": milestones,
            "tasks": tasks,
            "team_members": team_members,
            "timeline": timeline,
            "file_structure": {
                "overview": "PROJECT_OVERVIEW.md",
                "milestones": "MILESTONES.md", 
                "tasks": "TASKS.csv",
                "team": "TEAM.json",
                "timeline": "TIMELINE.json",
                "gantt_chart": "GANTT_CHART.html",
                "readme": "README.md"
            }
        }
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(project_data, f, indent=2, ensure_ascii=False, default=str)
        
        return file_path
    
    # Helper methods
    def _sanitize_filename(self, name: str) -> str:
        """Sanitize filename for filesystem"""
        import re
        return re.sub(r'[<>:"/\\|?*]', '_', name).strip()
    
    def _assign_task_to_member(self, task: Dict, team_members: List[Dict]) -> str:
        """Assign task to best matching team member"""
        if not team_members:
            return "TBD"
        
        # Simple assignment based on role matching
        task_desc = task.get('description', '').lower()
        task_title = task.get('title', '').lower()
        
        for member in team_members:
            role = member.get('role', '').lower()
            if 'frontend' in role and ('ui' in task_desc or 'frontend' in task_desc):
                return member.get('name', 'Unknown')
            elif 'backend' in role and ('api' in task_desc or 'backend' in task_desc):
                return member.get('name', 'Unknown')
            elif 'design' in role and ('design' in task_desc or 'ux' in task_desc):
                return member.get('name', 'Unknown')
        
        # Default to first team member
        return team_members[0].get('name', 'TBD')
    
    def _generate_skills_summary(self, team_members: List[Dict]) -> Dict[str, int]:
        """Generate skills summary across team"""
        skills_count = {}
        for member in team_members:
            for skill in member.get('skills', {}):
                skills_count[skill] = skills_count.get(skill, 0) + 1
        return skills_count
    
    def _calculate_milestone_date(self, milestone_num: int, duration: str) -> str:
        """Calculate estimated milestone completion date"""
        weeks = 2  # Default
        if 'week' in duration.lower():
            weeks = int(''.join(filter(str.isdigit, duration)) or 2)
        elif 'month' in duration.lower():
            weeks = int(''.join(filter(str.isdigit, duration)) or 1) * 4
        
        estimated_date = datetime.now() + timedelta(weeks=milestone_num * weeks)
        return estimated_date.strftime('%Y-%m-%d')
    
    def _estimate_bar_width(self, time_estimate: str) -> int:
        """Estimate Gantt bar width based on time estimate"""
        hours = self._parse_time_to_hours(time_estimate)
        return min(300, max(20, hours * 5))  # 5px per hour, max 300px
    
    def _parse_time_to_hours(self, time_str: str) -> int:
        """Parse time estimate to hours"""
        time_str = time_str.lower()
        if 'hour' in time_str:
            return int(''.join(filter(str.isdigit, time_str)) or 8)
        elif 'day' in time_str:
            return int(''.join(filter(str.isdigit, time_str)) or 1) * 8
        elif 'week' in time_str:
            return int(''.join(filter(str.isdigit, time_str)) or 1) * 40
        return 8

# Example usage
if __name__ == "__main__":
    local_pm = LocalProjectManager()
    
    # Demo data
    demo_milestones = [
        {
            "title": "Project Setup & Planning",
            "description": "Initial project setup and requirements gathering",
            "duration": "2 weeks"
        }
    ]
    
    demo_tasks = [
        {
            "title": "Setup Development Environment",
            "description": "Configure development tools and repositories",
            "time_estimate": "8 hours",
            "priority": "High"
        }
    ]
    
    demo_team = [
        {"name": "Alice Johnson", "role": "Backend Developer", "skills": {"python": 9, "sql": 8}},
        {"name": "Bob Smith", "role": "Frontend Developer", "skills": {"javascript": 8, "react": 9}}
    ]
    
    result = local_pm.create_project_structure(
        "Demo E-commerce Platform",
        demo_milestones,
        demo_tasks,
        demo_team
    )
    
    print("📁 Local Project Files Created:")
    print(json.dumps(result, indent=2))
